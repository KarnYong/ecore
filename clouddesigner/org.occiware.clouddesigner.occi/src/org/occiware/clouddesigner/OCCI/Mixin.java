/**
 */
package org.occiware.clouddesigner.OCCI;

import java.util.Map;

import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.EList;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Mixin</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link org.occiware.clouddesigner.OCCI.Mixin#getActions <em>Actions</em>}</li>
 *   <li>{@link org.occiware.clouddesigner.OCCI.Mixin#getDepends <em>Depends</em>}</li>
 *   <li>{@link org.occiware.clouddesigner.OCCI.Mixin#getApplies <em>Applies</em>}</li>
 *   <li>{@link org.occiware.clouddesigner.OCCI.Mixin#getEntities <em>Entities</em>}</li>
 * </ul>
 * </p>
 *
 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getMixin()
 * @model
 * @generated
 */
public interface Mixin extends Category {
	/**
	 * Returns the value of the '<em><b>Actions</b></em>' containment reference list.
	 * The list contents are of type {@link org.occiware.clouddesigner.OCCI.Action}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Actions</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Actions</em>' containment reference list.
	 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getMixin_Actions()
	 * @model containment="true"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.ogf.org/occi!Mixin!actions'"
	 * @generated
	 */
	EList<Action> getActions();

	/**
	 * Returns the value of the '<em><b>Depends</b></em>' reference list.
	 * The list contents are of type {@link org.occiware.clouddesigner.OCCI.Mixin}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Depends</em>' reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Depends</em>' reference list.
	 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getMixin_Depends()
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.ogf.org/occi!Mixin!depends'"
	 * @generated
	 */
	EList<Mixin> getDepends();

	/**
	 * Returns the value of the '<em><b>Applies</b></em>' reference list.
	 * The list contents are of type {@link org.occiware.clouddesigner.OCCI.Kind}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Applies</em>' reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Applies</em>' reference list.
	 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getMixin_Applies()
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.ogf.org/occi!Mixin!applies'"
	 * @generated
	 */
	EList<Kind> getApplies();

	/**
	 * Returns the value of the '<em><b>Entities</b></em>' reference list.
	 * The list contents are of type {@link org.occiware.clouddesigner.OCCI.Entity}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Entities</em>' reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Entities</em>' reference list.
	 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getMixin_Entities()
	 * @model changeable="false" derived="true"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='/**\n * Entity.allInstances()->select(mixins->includes(self))\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.elements.DomainType%> TYP_OCCI_c_c_Entity_0 = idResolver.getType(<%org.occiware.clouddesigner.OCCI.OCCITables%>.CLSSid_Entity, null);\nfinal /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SetValue%> allInstances = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.classifier.ClassifierAllInstancesOperation%>.INSTANCE.evaluate(evaluator, <%org.occiware.clouddesigner.OCCI.OCCITables%>.SET_CLSSid_Entity, TYP_OCCI_c_c_Entity_0));\n/*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SetValue%>.Accumulator accumulator = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createSetAccumulatorValue(<%org.occiware.clouddesigner.OCCI.OCCITables%>.SET_CLSSid_Entity);\n/*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR__1 = allInstances.iterator();\n/*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SetValue%> select;\nwhile (true) {\n    if (!ITERATOR__1.hasNext()) {\n        select = accumulator;\n        break;\n    }\n    /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Entity%> _1 = (<%org.occiware.clouddesigner.OCCI.Entity%>)ITERATOR__1.next();\n    /**\n     * mixins->includes(self)\n     \052/\n    if (_1 == null) {\n        throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Entity::mixins\\\'\");\n    }\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Mixin%>> mixins = _1.getMixins();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_mixins = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, mixins);\n    final /*@Thrown\052/ boolean includes = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.collection.CollectionIncludesOperation%>.INSTANCE.evaluate(BOXED_mixins, this).booleanValue());\n    //\n    if (includes == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n        accumulator.add(_1);\n    }\n}\nfinal <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Entity%>> UNBOXED_select = select.asEcoreObjects(idResolver, org.occiware.clouddesigner.OCCI.Entity.class);\nassert UNBOXED_select != null;\nreturn (<%org.eclipse.emf.common.util.EList<org.occiware.clouddesigner.OCCI.Entity>%>)UNBOXED_select;'"
	 * @generated
	 */
	EList<Entity> getEntities();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * inv ActionTermUnicity: actions->isUnique(term)\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\n/*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_isUnique;\ntry {\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Action%>> actions = this.getActions();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_actions = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Action, actions);\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SetValue%>.Accumulator accumulator = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createSetAccumulatorValue(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Action);\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR__1 = BOXED_actions.iterator();\n    /*@Thrown\052/ boolean isUnique;\n    while (true) {\n        if (!ITERATOR__1.hasNext()) {\n            isUnique = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE;\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Action%> _1 = (<%org.occiware.clouddesigner.OCCI.Action%>)ITERATOR__1.next();\n        /**\n         * term\n         \052/\n        if (_1 == null) {\n            throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Category::term\\\'\");\n        }\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> term = _1.getTerm();\n        //\n        if (accumulator.includes(term) == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n            isUnique = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.FALSE_VALUE;\t\t\t// Abort after second find\n            break;\n        }\n        else {\n            accumulator.add(term);\n        }\n    }\n    CAUGHT_isUnique = isUnique;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_isUnique = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_isUnique == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Mixin\", \"ActionTermUnicity\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.MIXIN__ACTION_TERM_UNICITY, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean ActionTermUnicity(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * inv NoCyclicInheritance: depends->closure(depends)->excludes(self)\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.elements.DomainStandardLibrary%> standardLibrary = idResolver.getStandardLibrary();\n/*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_excludes;\ntry {\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Mixin%>> depends = this.getDepends();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_depends = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, depends);\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.elements.DomainType%> TYPE_closure_0 = evaluator.getStaticTypeOf(BOXED_depends);\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.library.LibraryIteration%> IMPL_closure_0 = (<%org.eclipse.ocl.examples.domain.library.LibraryIteration%>)TYPE_closure_0.lookupImplementation(standardLibrary, <%org.eclipse.ocl.examples.library.oclstdlib.OCLstdlibTables%>.Operations._OrderedSet__closure);\n    final /*@NonNull\052/ Object ACC_closure_0 = IMPL_closure_0.createAccumulatorValue(evaluator, <%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, <%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin);\n    /**\n     * Implementation of the iterator body.\n     \052/\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.library.AbstractBinaryOperation%> BODY_closure_0 = new <%org.eclipse.ocl.examples.domain.library.AbstractBinaryOperation%>()\n    {\n        /**\n         * depends\n         \052/\n        @Override\n        public /*@Nullable\052/ Object evaluate(final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator, final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.ids.TypeId%> typeId, final /*@Nullable\052/ Object BOXED_depends, final /*@Nullable\052/ /*@NonInvalid\052/ <%java.lang.Object%> _1) {\n            final /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Mixin%> symbol_0 = (<%org.occiware.clouddesigner.OCCI.Mixin%>)_1;\n            if (symbol_0 == null) {\n                throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Mixin::depends\\\'\");\n            }\n            final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Mixin%>> depends_0 = symbol_0.getDepends();\n            final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_depends_0 = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, depends_0);\n            return BOXED_depends_0;\n        }\n    };\n    final /*@NonNull\052/  <%org.eclipse.ocl.examples.library.executor.ExecutorSingleIterationManager%> MGR_closure_0 = new <%org.eclipse.ocl.examples.library.executor.ExecutorSingleIterationManager%>(evaluator, <%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, BODY_closure_0, BOXED_depends, ACC_closure_0);\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> closure = (<%org.eclipse.ocl.examples.domain.values.OrderedSetValue%>)IMPL_closure_0.evaluateIteration(MGR_closure_0);\n    final /*@Thrown\052/ boolean excludes = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.collection.CollectionExcludesOperation%>.INSTANCE.evaluate(closure, this).booleanValue());\n    CAUGHT_excludes = excludes;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_excludes = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_excludes == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Mixin\", \"NoCyclicInheritance\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.MIXIN__NO_CYCLIC_INHERITANCE, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean NoCyclicInheritance(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * \n * inv CorrectScheme: let ownerScheme = self.oclContainer().oclAsType(Extension).scheme in scheme.substring(1,ownerScheme.size()-1) = ownerScheme.substring(1,ownerScheme.size()-1)\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\n/*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_eq;\ntry {\n    final /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.elements.DomainType%> TYP_OCCI_c_c_Extension_0 = idResolver.getType(<%org.occiware.clouddesigner.OCCI.OCCITables%>.CLSSid_Extension, null);\n    final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Object%> oclContainer = <%org.eclipse.ocl.examples.library.classifier.ClassifierOclContainerOperation%>.INSTANCE.evaluate(this);\n    final /*@Nullable\052/ /*@Thrown\052/ <%org.occiware.clouddesigner.OCCI.Extension%> oclAsType = (<%org.occiware.clouddesigner.OCCI.Extension%>)<%org.eclipse.ocl.examples.library.oclany.OclAnyOclAsTypeOperation%>.INSTANCE.evaluate(evaluator, oclContainer, TYP_OCCI_c_c_Extension_0);\n    if (oclAsType == null) {\n        throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Extension::scheme\\\'\");\n    }\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> ownerScheme = oclAsType.getScheme();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.IntegerValue%> size_0 = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.string.StringSizeOperation%>.INSTANCE.evaluate(ownerScheme));\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.IntegerValue%> diff_0 = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState((<%org.eclipse.ocl.examples.domain.values.IntegerValue%>)<%org.eclipse.ocl.examples.library.numeric.NumericMinusOperation%>.INSTANCE.evaluate(size_0, <%org.occiware.clouddesigner.OCCI.OCCITables%>.INT_1));\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> scheme = this.getScheme();\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> substring = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.string.StringSubstringOperation%>.INSTANCE.evaluate(scheme, <%org.occiware.clouddesigner.OCCI.OCCITables%>.INT_1, diff_0));\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> substring_0 = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.string.StringSubstringOperation%>.INSTANCE.evaluate(ownerScheme, <%org.occiware.clouddesigner.OCCI.OCCITables%>.INT_1, diff_0));\n    final /*@Thrown\052/ boolean eq = substring.equals(substring_0);\n    CAUGHT_eq = eq;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_eq = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_eq == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Mixin\", \"CorrectScheme\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.MIXIN__CORRECT_SCHEME, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean CorrectScheme(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * \n * inv AttributesNameNotAlreadyDefinedInDepends: attributes.name->excludesAll(depends->closure(depends).attributes.name)\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.elements.DomainStandardLibrary%> standardLibrary = idResolver.getStandardLibrary();\n/*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_excludesAll;\ntry {\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Attribute%>> attributes = this.getAttributes();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_attributes = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Attribute, attributes);\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%>.Accumulator accumulator = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createSequenceAccumulatorValue(<%org.occiware.clouddesigner.OCCI.OCCITables%>.SEQ_PRIMid_String);\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR__1 = BOXED_attributes.iterator();\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%> collect;\n    while (true) {\n        if (!ITERATOR__1.hasNext()) {\n            collect = accumulator;\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Attribute%> _1 = (<%org.occiware.clouddesigner.OCCI.Attribute%>)ITERATOR__1.next();\n        /**\n         * name\n         \052/\n        if (_1 == null) {\n            throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Attribute::name\\\'\");\n        }\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> name = _1.getName();\n        //\n        accumulator.add(name);\n    }\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Mixin%>> depends = this.getDepends();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_depends = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, depends);\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.elements.DomainType%> TYPE_closure_0 = evaluator.getStaticTypeOf(BOXED_depends);\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.library.LibraryIteration%> IMPL_closure_0 = (<%org.eclipse.ocl.examples.domain.library.LibraryIteration%>)TYPE_closure_0.lookupImplementation(standardLibrary, <%org.eclipse.ocl.examples.library.oclstdlib.OCLstdlibTables%>.Operations._OrderedSet__closure);\n    final /*@NonNull\052/ Object ACC_closure_0 = IMPL_closure_0.createAccumulatorValue(evaluator, <%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, <%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin);\n    /**\n     * Implementation of the iterator body.\n     \052/\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.library.AbstractBinaryOperation%> BODY_closure_0 = new <%org.eclipse.ocl.examples.domain.library.AbstractBinaryOperation%>()\n    {\n        /**\n         * depends\n         \052/\n        @Override\n        public /*@Nullable\052/ Object evaluate(final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator, final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.ids.TypeId%> typeId, final /*@Nullable\052/ Object BOXED_depends, final /*@Nullable\052/ /*@NonInvalid\052/ <%java.lang.Object%> _1_0) {\n            final /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Mixin%> symbol_0 = (<%org.occiware.clouddesigner.OCCI.Mixin%>)_1_0;\n            if (symbol_0 == null) {\n                throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Mixin::depends\\\'\");\n            }\n            final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Mixin%>> depends_0 = symbol_0.getDepends();\n            final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_depends_0 = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, depends_0);\n            return BOXED_depends_0;\n        }\n    };\n    final /*@NonNull\052/  <%org.eclipse.ocl.examples.library.executor.ExecutorSingleIterationManager%> MGR_closure_0 = new <%org.eclipse.ocl.examples.library.executor.ExecutorSingleIterationManager%>(evaluator, <%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, BODY_closure_0, BOXED_depends, ACC_closure_0);\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> closure = (<%org.eclipse.ocl.examples.domain.values.OrderedSetValue%>)IMPL_closure_0.evaluateIteration(MGR_closure_0);\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%>.Accumulator accumulator_0 = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createSequenceAccumulatorValue(<%org.occiware.clouddesigner.OCCI.OCCITables%>.SEQ_CLSSid_Attribute);\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR__1_1 = closure.iterator();\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%> collect_1;\n    while (true) {\n        if (!ITERATOR__1_1.hasNext()) {\n            collect_1 = accumulator_0;\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Mixin%> _1_1 = (<%org.occiware.clouddesigner.OCCI.Mixin%>)ITERATOR__1_1.next();\n        /**\n         * attributes\n         \052/\n        if (_1_1 == null) {\n            throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Category::attributes\\\'\");\n        }\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Attribute%>> attributes_0 = _1_1.getAttributes();\n        final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_attributes_0 = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Attribute, attributes_0);\n        //\n        for (Object value : BOXED_attributes_0.flatten().getElements()) {\n            accumulator_0.add(value);\n        }\n    }\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%>.Accumulator accumulator_1 = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createSequenceAccumulatorValue(<%org.occiware.clouddesigner.OCCI.OCCITables%>.SEQ_PRIMid_String);\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR__1_2 = collect_1.iterator();\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%> collect_0;\n    while (true) {\n        if (!ITERATOR__1_2.hasNext()) {\n            collect_0 = accumulator_1;\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Attribute%> _1_2 = (<%org.occiware.clouddesigner.OCCI.Attribute%>)ITERATOR__1_2.next();\n        /**\n         * name\n         \052/\n        if (_1_2 == null) {\n            throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Attribute::name\\\'\");\n        }\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> name_0 = _1_2.getName();\n        //\n        accumulator_1.add(name_0);\n    }\n    final /*@Thrown\052/ boolean excludesAll = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.collection.CollectionExcludesAllOperation%>.INSTANCE.evaluate(collect, collect_0).booleanValue());\n    CAUGHT_excludesAll = excludesAll;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_excludesAll = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_excludesAll == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Mixin\", \"AttributesNameNotAlreadyDefinedInDepends\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.MIXIN__ATTRIBUTES_NAME_NOT_ALREADY_DEFINED_IN_DEPENDS, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean AttributesNameNotAlreadyDefinedInDepends(DiagnosticChain diagnostics, Map<Object, Object> context);

} // Mixin
