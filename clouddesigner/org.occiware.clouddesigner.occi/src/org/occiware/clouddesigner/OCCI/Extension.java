/**
 */
package org.occiware.clouddesigner.OCCI;

import java.util.Map;

import org.eclipse.emf.common.util.DiagnosticChain;
import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * A representation of the model object '<em><b>Extension</b></em>'.
 * <!-- end-user-doc -->
 *
 * <p>
 * The following features are supported:
 * <ul>
 *   <li>{@link org.occiware.clouddesigner.OCCI.Extension#getName <em>Name</em>}</li>
 *   <li>{@link org.occiware.clouddesigner.OCCI.Extension#getScheme <em>Scheme</em>}</li>
 *   <li>{@link org.occiware.clouddesigner.OCCI.Extension#getImport <em>Import</em>}</li>
 *   <li>{@link org.occiware.clouddesigner.OCCI.Extension#getKinds <em>Kinds</em>}</li>
 *   <li>{@link org.occiware.clouddesigner.OCCI.Extension#getMixins <em>Mixins</em>}</li>
 *   <li>{@link org.occiware.clouddesigner.OCCI.Extension#getTypes <em>Types</em>}</li>
 * </ul>
 * </p>
 *
 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getExtension()
 * @model
 * @generated
 */
public interface Extension extends EObject {
	/**
	 * Returns the value of the '<em><b>Name</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Name</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Name</em>' attribute.
	 * @see #setName(String)
	 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getExtension_Name()
	 * @model dataType="org.occiware.clouddesigner.OCCI.String" required="true"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.ogf.org/occi!Extension!name'"
	 * @generated
	 */
	String getName();

	/**
	 * Sets the value of the '{@link org.occiware.clouddesigner.OCCI.Extension#getName <em>Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Name</em>' attribute.
	 * @see #getName()
	 * @generated
	 */
	void setName(String value);

	/**
	 * Returns the value of the '<em><b>Scheme</b></em>' attribute.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Scheme</em>' attribute isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Scheme</em>' attribute.
	 * @see #setScheme(String)
	 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getExtension_Scheme()
	 * @model dataType="org.occiware.clouddesigner.OCCI.String" required="true"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.ogf.org/occi!Extension!scheme'"
	 * @generated
	 */
	String getScheme();

	/**
	 * Sets the value of the '{@link org.occiware.clouddesigner.OCCI.Extension#getScheme <em>Scheme</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @param value the new value of the '<em>Scheme</em>' attribute.
	 * @see #getScheme()
	 * @generated
	 */
	void setScheme(String value);

	/**
	 * Returns the value of the '<em><b>Import</b></em>' reference list.
	 * The list contents are of type {@link org.occiware.clouddesigner.OCCI.Extension}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Import</em>' reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Import</em>' reference list.
	 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getExtension_Import()
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.ogf.org/occi!Extension!import'"
	 * @generated
	 */
	EList<Extension> getImport();

	/**
	 * Returns the value of the '<em><b>Kinds</b></em>' containment reference list.
	 * The list contents are of type {@link org.occiware.clouddesigner.OCCI.Kind}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Kinds</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Kinds</em>' containment reference list.
	 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getExtension_Kinds()
	 * @model containment="true" keys="term"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.ogf.org/occi!Extension!kinds'"
	 * @generated
	 */
	EList<Kind> getKinds();

	/**
	 * Returns the value of the '<em><b>Mixins</b></em>' containment reference list.
	 * The list contents are of type {@link org.occiware.clouddesigner.OCCI.Mixin}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Mixins</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Mixins</em>' containment reference list.
	 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getExtension_Mixins()
	 * @model containment="true" keys="term"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.ogf.org/occi!Extension!mixins'"
	 * @generated
	 */
	EList<Mixin> getMixins();

	/**
	 * Returns the value of the '<em><b>Types</b></em>' containment reference list.
	 * The list contents are of type {@link org.eclipse.emf.ecore.EDataType}.
	 * <!-- begin-user-doc -->
	 * <p>
	 * If the meaning of the '<em>Types</em>' containment reference list isn't clear,
	 * there really should be more of a description here...
	 * </p>
	 * <!-- end-user-doc -->
	 * @return the value of the '<em>Types</em>' containment reference list.
	 * @see org.occiware.clouddesigner.OCCI.OCCIPackage#getExtension_Types()
	 * @model containment="true"
	 *        annotation="http://www.eclipse.org/emf/2002/GenModel get='throw new UnsupportedOperationException();  // FIXME Unimplemented http://schemas.ogf.org/occi!Extension!types'"
	 * @generated
	 */
	EList<EDataType> getTypes();

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * inv KindsSchemeValid: kinds->forAll(k | k.scheme = self.scheme)\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\n/*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_forAll;\ntry {\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Kind%>> kinds = this.getKinds();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_kinds = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Kind, kinds);\n    /*@NonNull\052/ /*@Thrown\052/ <%java.lang.Object%> accumulator = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE;\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR_k = BOXED_kinds.iterator();\n    /*@Thrown\052/ boolean forAll;\n    while (true) {\n        if (!ITERATOR_k.hasNext()) {\n            if (accumulator == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n                forAll = (<%java.lang.Boolean%>)accumulator;\n            }\n            else {\n                throw (<%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>)accumulator;\n            }\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Kind%> k = (<%org.occiware.clouddesigner.OCCI.Kind%>)ITERATOR_k.next();\n        /**\n         * k.scheme = self.scheme\n         \052/\n        /*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_eq;\n        try {\n            if (k == null) {\n                throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Category::scheme\\\'\");\n            }\n            final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> scheme = k.getScheme();\n            final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> scheme_0 = this.getScheme();\n            final /*@Thrown\052/ boolean eq = scheme.equals(scheme_0);\n            CAUGHT_eq = eq;\n        }\n        catch (<%java.lang.Exception%> e) {\n            CAUGHT_eq = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n        }\n        //\n        if (CAUGHT_eq == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.FALSE_VALUE) {\t\t\t\t\t// Normal unsuccessful body evaluation result\n            forAll = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.FALSE_VALUE;\n            break;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately \n        }\n        else if (CAUGHT_eq == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\t\t\t\t// Normal successful body evaluation result\n            ;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n        }\n        else if (CAUGHT_eq instanceof <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>) {\t\t// Abnormal exception evaluation result\n            accumulator = CAUGHT_eq;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n        }\n        else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n            accumulator = new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.NonBooleanBody, \"forAll\");\n        }\n    }\n    CAUGHT_forAll = forAll;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_forAll = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_forAll == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Extension\", \"KindsSchemeValid\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.EXTENSION__KINDS_SCHEME_VALID, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean KindsSchemeValid(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * \n * inv KindParentLocalOrImported: kinds->forAll(parent <> null implies let parentExtension = parent.oclContainer() in parentExtension = self or import->includes(parentExtension))\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.elements.DomainStandardLibrary%> standardLibrary = idResolver.getStandardLibrary();\n/*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_forAll;\ntry {\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Kind%>> kinds = this.getKinds();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_kinds = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Kind, kinds);\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.elements.DomainType%> TYPE_forAll_0 = evaluator.getStaticTypeOf(BOXED_kinds);\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.library.LibraryIteration%> IMPL_forAll_0 = (<%org.eclipse.ocl.examples.domain.library.LibraryIteration%>)TYPE_forAll_0.lookupImplementation(standardLibrary, <%org.eclipse.ocl.examples.library.oclstdlib.OCLstdlibTables%>.Operations._Collection__0_forAll);\n    final /*@NonNull\052/ Object ACC_forAll_0 = IMPL_forAll_0.createAccumulatorValue(evaluator, <%org.eclipse.ocl.examples.domain.ids.TypeId%>.BOOLEAN, <%org.eclipse.ocl.examples.domain.ids.TypeId%>.BOOLEAN);\n    /**\n     * Implementation of the iterator body.\n     \052/\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.library.AbstractTernaryOperation%> BODY_forAll_0 = new <%org.eclipse.ocl.examples.domain.library.AbstractTernaryOperation%>()\n    {\n        /**\n         * parent <> null implies\n         * let parentExtension : OclElement = parent.oclContainer()\n         * in parentExtension = self or import->includes(parentExtension)\n         \052/\n        @Override\n        public /*@Nullable\052/ Object evaluate(final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator, final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.ids.TypeId%> typeId, final /*@Nullable\052/ Object BOXED_kinds, final /*@Nullable\052/ /*@NonInvalid\052/ <%java.lang.Object%> _1, final /*@Nullable\052/ /*@NonInvalid\052/ <%java.lang.Object%> _2) {\n            /*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_implies;\n            try {\n                /*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_ne;\n                try {\n                    final /*@Nullable\052/ /*@Thrown\052/ <%org.occiware.clouddesigner.OCCI.Kind%> parent = this.getParent();\n                    final /*@Thrown\052/ boolean ne = parent != null;\n                    CAUGHT_ne = ne;\n                }\n                catch (<%java.lang.Exception%> e) {\n                    CAUGHT_ne = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                }\n                /*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_or;\n                try {\n                    /*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_parentExtension;\n                    try {\n                        final /*@Nullable\052/ /*@Thrown\052/ <%org.occiware.clouddesigner.OCCI.Kind%> parent_0 = this.getParent();\n                        final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Object%> parentExtension = <%org.eclipse.ocl.examples.library.classifier.ClassifierOclContainerOperation%>.INSTANCE.evaluate(parent_0);\n                        CAUGHT_parentExtension = parentExtension;\n                    }\n                    catch (<%java.lang.Exception%> e) {\n                        CAUGHT_parentExtension = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                    }\n                    /*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_eq;\n                    try {\n                        if (CAUGHT_parentExtension instanceof <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>) {\n                            throw (<%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>)CAUGHT_parentExtension;\n                        }\n                        final /*@Thrown\052/ boolean eq = this.equals(CAUGHT_parentExtension);\n                        CAUGHT_eq = eq;\n                    }\n                    catch (<%java.lang.Exception%> e) {\n                        CAUGHT_eq = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                    }\n                    /*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_includes;\n                    try {\n                        final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Extension%>> symbol_0 = this.getImport();\n                        final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_symbol_0 = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Extension, symbol_0);\n                        if (CAUGHT_parentExtension instanceof <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>) {\n                            throw (<%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>)CAUGHT_parentExtension;\n                        }\n                        final /*@Thrown\052/ boolean includes = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.collection.CollectionIncludesOperation%>.INSTANCE.evaluate(BOXED_symbol_0, CAUGHT_parentExtension).booleanValue());\n                        CAUGHT_includes = includes;\n                    }\n                    catch (<%java.lang.Exception%> e) {\n                        CAUGHT_includes = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                    }\n                    final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Boolean%> or = <%org.eclipse.ocl.examples.library.logical.BooleanOrOperation%>.INSTANCE.evaluate(CAUGHT_eq, CAUGHT_includes);\n                    CAUGHT_or = or;\n                }\n                catch (<%java.lang.Exception%> e) {\n                    CAUGHT_or = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                }\n                final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Boolean%> implies = <%org.eclipse.ocl.examples.library.logical.BooleanImpliesOperation%>.INSTANCE.evaluate(CAUGHT_ne, CAUGHT_or);\n                CAUGHT_implies = implies;\n            }\n            catch (<%java.lang.Exception%> e) {\n                CAUGHT_implies = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n            }\n            return CAUGHT_implies;\n        }\n    };\n    final /*@NonNull\052/  <%org.eclipse.ocl.examples.library.executor.ExecutorDoubleIterationManager%> MGR_forAll_0 = new <%org.eclipse.ocl.examples.library.executor.ExecutorDoubleIterationManager%>(evaluator, <%org.eclipse.ocl.examples.domain.ids.TypeId%>.BOOLEAN, BODY_forAll_0, BOXED_kinds, ACC_forAll_0);\n    final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Boolean%> forAll = (<%java.lang.Boolean%>)IMPL_forAll_0.evaluateIteration(MGR_forAll_0);\n    CAUGHT_forAll = forAll;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_forAll = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_forAll == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = CAUGHT_forAll == null ? <%org.eclipse.emf.common.util.Diagnostic%>.ERROR : <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Extension\", \"KindParentLocalOrImported\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.EXTENSION__KIND_PARENT_LOCAL_OR_IMPORTED, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean KindParentLocalOrImported(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * \n * inv MixinsSchemeValid: mixins->forAll(m | m.scheme.substring(1,scheme.size()-1) = scheme.substring(1,scheme.size()-1))\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\n/*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_forAll;\ntry {\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Mixin%>> mixins = this.getMixins();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_mixins = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, mixins);\n    /*@NonNull\052/ /*@Thrown\052/ <%java.lang.Object%> accumulator = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE;\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR_m = BOXED_mixins.iterator();\n    /*@Thrown\052/ boolean forAll;\n    while (true) {\n        if (!ITERATOR_m.hasNext()) {\n            if (accumulator == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n                forAll = (<%java.lang.Boolean%>)accumulator;\n            }\n            else {\n                throw (<%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>)accumulator;\n            }\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Mixin%> m = (<%org.occiware.clouddesigner.OCCI.Mixin%>)ITERATOR_m.next();\n        /**\n         * \n         * m.scheme.substring(1, scheme.size() - 1) =\n         * scheme.substring(1, scheme.size() - 1)\n         \052/\n        /*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_eq;\n        try {\n            final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> scheme_1 = this.getScheme();\n            final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.IntegerValue%> size_0 = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.string.StringSizeOperation%>.INSTANCE.evaluate(scheme_1));\n            final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.IntegerValue%> diff_0 = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState((<%org.eclipse.ocl.examples.domain.values.IntegerValue%>)<%org.eclipse.ocl.examples.library.numeric.NumericMinusOperation%>.INSTANCE.evaluate(size_0, <%org.occiware.clouddesigner.OCCI.OCCITables%>.INT_1));\n            if (m == null) {\n                throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Category::scheme\\\'\");\n            }\n            final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> scheme = m.getScheme();\n            final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> substring = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.string.StringSubstringOperation%>.INSTANCE.evaluate(scheme, <%org.occiware.clouddesigner.OCCI.OCCITables%>.INT_1, diff_0));\n            final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> substring_0 = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.string.StringSubstringOperation%>.INSTANCE.evaluate(scheme_1, <%org.occiware.clouddesigner.OCCI.OCCITables%>.INT_1, diff_0));\n            final /*@Thrown\052/ boolean eq = substring.equals(substring_0);\n            CAUGHT_eq = eq;\n        }\n        catch (<%java.lang.Exception%> e) {\n            CAUGHT_eq = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n        }\n        //\n        if (CAUGHT_eq == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.FALSE_VALUE) {\t\t\t\t\t// Normal unsuccessful body evaluation result\n            forAll = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.FALSE_VALUE;\n            break;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Stop immediately \n        }\n        else if (CAUGHT_eq == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\t\t\t\t// Normal successful body evaluation result\n            ;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Carry on\n        }\n        else if (CAUGHT_eq instanceof <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>) {\t\t// Abnormal exception evaluation result\n            accumulator = CAUGHT_eq;\t\t\t\t\t\t\t\t\t// Cache an exception failure\n        }\n        else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Impossible badly typed result\n            accumulator = new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.NonBooleanBody, \"forAll\");\n        }\n    }\n    CAUGHT_forAll = forAll;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_forAll = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_forAll == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Extension\", \"MixinsSchemeValid\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.EXTENSION__MIXINS_SCHEME_VALID, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean MixinsSchemeValid(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * inv TermUnicity: kinds.term->intersection(mixins.term)->isEmpty()\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\n/*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_isEmpty;\ntry {\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Kind%>> kinds = this.getKinds();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_kinds = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Kind, kinds);\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%>.Accumulator accumulator = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createSequenceAccumulatorValue(<%org.occiware.clouddesigner.OCCI.OCCITables%>.SEQ_PRIMid_String);\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR__1 = BOXED_kinds.iterator();\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%> collect;\n    while (true) {\n        if (!ITERATOR__1.hasNext()) {\n            collect = accumulator;\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Kind%> _1 = (<%org.occiware.clouddesigner.OCCI.Kind%>)ITERATOR__1.next();\n        /**\n         * term\n         \052/\n        if (_1 == null) {\n            throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Category::term\\\'\");\n        }\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> term = _1.getTerm();\n        //\n        accumulator.add(term);\n    }\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Mixin%>> mixins = this.getMixins();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_mixins = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, mixins);\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%>.Accumulator accumulator_0 = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createSequenceAccumulatorValue(<%org.occiware.clouddesigner.OCCI.OCCITables%>.SEQ_PRIMid_String);\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR__1_0 = BOXED_mixins.iterator();\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%> collect_0;\n    while (true) {\n        if (!ITERATOR__1_0.hasNext()) {\n            collect_0 = accumulator_0;\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Mixin%> _1_0 = (<%org.occiware.clouddesigner.OCCI.Mixin%>)ITERATOR__1_0.next();\n        /**\n         * term\n         \052/\n        if (_1_0 == null) {\n            throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Category::term\\\'\");\n        }\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> term_0 = _1_0.getTerm();\n        //\n        accumulator_0.add(term_0);\n    }\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.BagValue%> intersection = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState((<%org.eclipse.ocl.examples.domain.values.BagValue%>)<%org.eclipse.ocl.examples.library.collection.CollectionIntersectionOperation%>.INSTANCE.evaluate(collect, collect_0));\n    final /*@Thrown\052/ boolean isEmpty = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.collection.CollectionIsEmptyOperation%>.INSTANCE.evaluate(intersection).booleanValue());\n    CAUGHT_isEmpty = isEmpty;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_isEmpty = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_isEmpty == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Extension\", \"TermUnicity\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.EXTENSION__TERM_UNICITY, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean TermUnicity(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * \n * inv MixinAppliesLocalOrImported: mixins.applies->forAll(let extension = oclContainer() in extension = self or import->includes(extension))\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.elements.DomainStandardLibrary%> standardLibrary = idResolver.getStandardLibrary();\n/*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_forAll;\ntry {\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Mixin%>> mixins = this.getMixins();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_mixins = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, mixins);\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%>.Accumulator accumulator = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createSequenceAccumulatorValue(<%org.occiware.clouddesigner.OCCI.OCCITables%>.SEQ_CLSSid_Kind);\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR__1 = BOXED_mixins.iterator();\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%> collect;\n    while (true) {\n        if (!ITERATOR__1.hasNext()) {\n            collect = accumulator;\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Mixin%> _1 = (<%org.occiware.clouddesigner.OCCI.Mixin%>)ITERATOR__1.next();\n        /**\n         * applies\n         \052/\n        if (_1 == null) {\n            throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Mixin::applies\\\'\");\n        }\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Kind%>> applies = _1.getApplies();\n        final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_applies = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Kind, applies);\n        //\n        for (Object value : BOXED_applies.flatten().getElements()) {\n            accumulator.add(value);\n        }\n    }\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.elements.DomainType%> TYPE_forAll_0 = evaluator.getStaticTypeOf(collect);\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.library.LibraryIteration%> IMPL_forAll_0 = (<%org.eclipse.ocl.examples.domain.library.LibraryIteration%>)TYPE_forAll_0.lookupImplementation(standardLibrary, <%org.eclipse.ocl.examples.library.oclstdlib.OCLstdlibTables%>.Operations._Collection__0_forAll);\n    final /*@NonNull\052/ Object ACC_forAll_0 = IMPL_forAll_0.createAccumulatorValue(evaluator, <%org.eclipse.ocl.examples.domain.ids.TypeId%>.BOOLEAN, <%org.eclipse.ocl.examples.domain.ids.TypeId%>.BOOLEAN);\n    /**\n     * Implementation of the iterator body.\n     \052/\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.library.AbstractTernaryOperation%> BODY_forAll_0 = new <%org.eclipse.ocl.examples.domain.library.AbstractTernaryOperation%>()\n    {\n        /**\n         * \n         * let extension : OclElement = oclContainer()\n         * in extension = self or import->includes(extension)\n         \052/\n        @Override\n        public /*@Nullable\052/ Object evaluate(final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator, final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.ids.TypeId%> typeId, final /*@Nullable\052/ Object collect, final /*@Nullable\052/ /*@NonInvalid\052/ <%java.lang.Object%> _1_0, final /*@Nullable\052/ /*@NonInvalid\052/ <%java.lang.Object%> _2) {\n            /*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_or;\n            try {\n                /*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_extension;\n                try {\n                    final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Object%> extension = <%org.eclipse.ocl.examples.library.classifier.ClassifierOclContainerOperation%>.INSTANCE.evaluate(this);\n                    CAUGHT_extension = extension;\n                }\n                catch (<%java.lang.Exception%> e) {\n                    CAUGHT_extension = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                }\n                /*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_eq;\n                try {\n                    if (CAUGHT_extension instanceof <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>) {\n                        throw (<%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>)CAUGHT_extension;\n                    }\n                    final /*@Thrown\052/ boolean eq = this.equals(CAUGHT_extension);\n                    CAUGHT_eq = eq;\n                }\n                catch (<%java.lang.Exception%> e) {\n                    CAUGHT_eq = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                }\n                /*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_includes;\n                try {\n                    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Extension%>> symbol_0 = this.getImport();\n                    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_symbol_0 = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Extension, symbol_0);\n                    if (CAUGHT_extension instanceof <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>) {\n                        throw (<%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>)CAUGHT_extension;\n                    }\n                    final /*@Thrown\052/ boolean includes = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.collection.CollectionIncludesOperation%>.INSTANCE.evaluate(BOXED_symbol_0, CAUGHT_extension).booleanValue());\n                    CAUGHT_includes = includes;\n                }\n                catch (<%java.lang.Exception%> e) {\n                    CAUGHT_includes = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                }\n                final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Boolean%> or = <%org.eclipse.ocl.examples.library.logical.BooleanOrOperation%>.INSTANCE.evaluate(CAUGHT_eq, CAUGHT_includes);\n                CAUGHT_or = or;\n            }\n            catch (<%java.lang.Exception%> e) {\n                CAUGHT_or = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n            }\n            return CAUGHT_or;\n        }\n    };\n    final /*@NonNull\052/  <%org.eclipse.ocl.examples.library.executor.ExecutorDoubleIterationManager%> MGR_forAll_0 = new <%org.eclipse.ocl.examples.library.executor.ExecutorDoubleIterationManager%>(evaluator, <%org.eclipse.ocl.examples.domain.ids.TypeId%>.BOOLEAN, BODY_forAll_0, collect, ACC_forAll_0);\n    final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Boolean%> forAll = (<%java.lang.Boolean%>)IMPL_forAll_0.evaluateIteration(MGR_forAll_0);\n    CAUGHT_forAll = forAll;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_forAll = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_forAll == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = CAUGHT_forAll == null ? <%org.eclipse.emf.common.util.Diagnostic%>.ERROR : <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Extension\", \"MixinAppliesLocalOrImported\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.EXTENSION__MIXIN_APPLIES_LOCAL_OR_IMPORTED, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean MixinAppliesLocalOrImported(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * inv SchemeUnique: Extension.allInstances()->isUnique(scheme)\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\n/*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_isUnique;\ntry {\n    final /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.elements.DomainType%> TYP_OCCI_c_c_Extension_0 = idResolver.getType(<%org.occiware.clouddesigner.OCCI.OCCITables%>.CLSSid_Extension, null);\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SetValue%> allInstances = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.classifier.ClassifierAllInstancesOperation%>.INSTANCE.evaluate(evaluator, <%org.occiware.clouddesigner.OCCI.OCCITables%>.SET_CLSSid_Extension, TYP_OCCI_c_c_Extension_0));\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SetValue%>.Accumulator accumulator = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createSetAccumulatorValue(<%org.occiware.clouddesigner.OCCI.OCCITables%>.SET_CLSSid_Extension);\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR__1 = allInstances.iterator();\n    /*@Thrown\052/ boolean isUnique;\n    while (true) {\n        if (!ITERATOR__1.hasNext()) {\n            isUnique = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE;\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Extension%> _1 = (<%org.occiware.clouddesigner.OCCI.Extension%>)ITERATOR__1.next();\n        /**\n         * scheme\n         \052/\n        if (_1 == null) {\n            throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Extension::scheme\\\'\");\n        }\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.lang.String%> scheme = _1.getScheme();\n        //\n        if (accumulator.includes(scheme) == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n            isUnique = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.FALSE_VALUE;\t\t\t// Abort after second find\n            break;\n        }\n        else {\n            accumulator.add(scheme);\n        }\n    }\n    CAUGHT_isUnique = isUnique;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_isUnique = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_isUnique == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Extension\", \"SchemeUnique\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.EXTENSION__SCHEME_UNIQUE, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean SchemeUnique(DiagnosticChain diagnostics, Map<Object, Object> context);

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @model annotation="http://www.eclipse.org/emf/2002/GenModel body='/**\n * \n * inv MixinDependsLocalOrImported: mixins.depends->forAll(let extension = oclContainer() in extension = self or import->includes(extension))\n \052/\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator = <%org.eclipse.ocl.examples.pivot.utilities.PivotUtil%>.getEvaluator(this);\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.types.IdResolver%> idResolver = evaluator.getIdResolver();\nfinal /*@NonNull\052/ /*@NonInvalid\052/ <%org.eclipse.ocl.examples.domain.elements.DomainStandardLibrary%> standardLibrary = idResolver.getStandardLibrary();\n/*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_forAll;\ntry {\n    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Mixin%>> mixins = this.getMixins();\n    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_mixins = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, mixins);\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%>.Accumulator accumulator = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createSequenceAccumulatorValue(<%org.occiware.clouddesigner.OCCI.OCCITables%>.SEQ_CLSSid_Mixin);\n    /*@Nullable\052/ <%java.util.Iterator%><?> ITERATOR__1 = BOXED_mixins.iterator();\n    /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.SequenceValue%> collect;\n    while (true) {\n        if (!ITERATOR__1.hasNext()) {\n            collect = accumulator;\n            break;\n        }\n        /*@Nullable\052/ /*@NonInvalid\052/ <%org.occiware.clouddesigner.OCCI.Mixin%> _1 = (<%org.occiware.clouddesigner.OCCI.Mixin%>)ITERATOR__1.next();\n        /**\n         * depends\n         \052/\n        if (_1 == null) {\n            throw new <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>(\"Null source for \\\'OCCI::Mixin::depends\\\'\");\n        }\n        final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Mixin%>> depends = _1.getDepends();\n        final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_depends = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Mixin, depends);\n        //\n        for (Object value : BOXED_depends.flatten().getElements()) {\n            accumulator.add(value);\n        }\n    }\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.elements.DomainType%> TYPE_forAll_0 = evaluator.getStaticTypeOf(collect);\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.library.LibraryIteration%> IMPL_forAll_0 = (<%org.eclipse.ocl.examples.domain.library.LibraryIteration%>)TYPE_forAll_0.lookupImplementation(standardLibrary, <%org.eclipse.ocl.examples.library.oclstdlib.OCLstdlibTables%>.Operations._Collection__0_forAll);\n    final /*@NonNull\052/ Object ACC_forAll_0 = IMPL_forAll_0.createAccumulatorValue(evaluator, <%org.eclipse.ocl.examples.domain.ids.TypeId%>.BOOLEAN, <%org.eclipse.ocl.examples.domain.ids.TypeId%>.BOOLEAN);\n    /**\n     * Implementation of the iterator body.\n     \052/\n    final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.library.AbstractTernaryOperation%> BODY_forAll_0 = new <%org.eclipse.ocl.examples.domain.library.AbstractTernaryOperation%>()\n    {\n        /**\n         * \n         * let extension : OclElement = oclContainer()\n         * in extension = self or import->includes(extension)\n         \052/\n        @Override\n        public /*@Nullable\052/ Object evaluate(final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.evaluation.DomainEvaluator%> evaluator, final /*@NonNull\052/ <%org.eclipse.ocl.examples.domain.ids.TypeId%> typeId, final /*@Nullable\052/ Object collect, final /*@Nullable\052/ /*@NonInvalid\052/ <%java.lang.Object%> _1_0, final /*@Nullable\052/ /*@NonInvalid\052/ <%java.lang.Object%> _2) {\n            /*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_or;\n            try {\n                /*@Nullable\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_extension;\n                try {\n                    final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Object%> extension = <%org.eclipse.ocl.examples.library.classifier.ClassifierOclContainerOperation%>.INSTANCE.evaluate(this);\n                    CAUGHT_extension = extension;\n                }\n                catch (<%java.lang.Exception%> e) {\n                    CAUGHT_extension = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                }\n                /*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_eq;\n                try {\n                    if (CAUGHT_extension instanceof <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>) {\n                        throw (<%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>)CAUGHT_extension;\n                    }\n                    final /*@Thrown\052/ boolean eq = this.equals(CAUGHT_extension);\n                    CAUGHT_eq = eq;\n                }\n                catch (<%java.lang.Exception%> e) {\n                    CAUGHT_eq = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                }\n                /*@NonNull\052/ /*@Caught\052/ <%java.lang.Object%> CAUGHT_includes;\n                try {\n                    final /*@NonNull\052/ /*@Thrown\052/ <%java.util.List%><<%org.occiware.clouddesigner.OCCI.Extension%>> symbol_0 = this.getImport();\n                    final /*@NonNull\052/ /*@Thrown\052/ <%org.eclipse.ocl.examples.domain.values.OrderedSetValue%> BOXED_symbol_0 = idResolver.createOrderedSetOfAll(<%org.occiware.clouddesigner.OCCI.OCCITables%>.ORD_CLSSid_Extension, symbol_0);\n                    if (CAUGHT_extension instanceof <%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>) {\n                        throw (<%org.eclipse.ocl.examples.domain.values.impl.InvalidValueException%>)CAUGHT_extension;\n                    }\n                    final /*@Thrown\052/ boolean includes = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.nonNullState(<%org.eclipse.ocl.examples.library.collection.CollectionIncludesOperation%>.INSTANCE.evaluate(BOXED_symbol_0, CAUGHT_extension).booleanValue());\n                    CAUGHT_includes = includes;\n                }\n                catch (<%java.lang.Exception%> e) {\n                    CAUGHT_includes = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n                }\n                final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Boolean%> or = <%org.eclipse.ocl.examples.library.logical.BooleanOrOperation%>.INSTANCE.evaluate(CAUGHT_eq, CAUGHT_includes);\n                CAUGHT_or = or;\n            }\n            catch (<%java.lang.Exception%> e) {\n                CAUGHT_or = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n            }\n            return CAUGHT_or;\n        }\n    };\n    final /*@NonNull\052/  <%org.eclipse.ocl.examples.library.executor.ExecutorDoubleIterationManager%> MGR_forAll_0 = new <%org.eclipse.ocl.examples.library.executor.ExecutorDoubleIterationManager%>(evaluator, <%org.eclipse.ocl.examples.domain.ids.TypeId%>.BOOLEAN, BODY_forAll_0, collect, ACC_forAll_0);\n    final /*@Nullable\052/ /*@Thrown\052/ <%java.lang.Boolean%> forAll = (<%java.lang.Boolean%>)IMPL_forAll_0.evaluateIteration(MGR_forAll_0);\n    CAUGHT_forAll = forAll;\n}\ncatch (<%java.lang.Exception%> e) {\n    CAUGHT_forAll = <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.createInvalidValue(e);\n}\nif (CAUGHT_forAll == <%org.eclipse.ocl.examples.domain.values.util.ValuesUtil%>.TRUE_VALUE) {\n    return true;\n}\nif (diagnostics != null) {\n    int severity = CAUGHT_forAll == null ? <%org.eclipse.emf.common.util.Diagnostic%>.ERROR : <%org.eclipse.emf.common.util.Diagnostic%>.WARNING;\n    <%java.lang.String%> message = <%org.eclipse.ocl.examples.domain.utilities.DomainUtil%>.bind(<%org.eclipse.ocl.examples.domain.messages.EvaluatorMessages%>.ValidationConstraintIsNotSatisfied_ERROR_, new Object[]{\"Extension\", \"MixinDependsLocalOrImported\", <%org.eclipse.emf.ecore.util.EObjectValidator%>.getObjectLabel(this, context)});\n    diagnostics.add(new <%org.eclipse.emf.common.util.BasicDiagnostic%>(severity, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.DIAGNOSTIC_SOURCE, <%org.occiware.clouddesigner.OCCI.util.OCCIValidator%>.EXTENSION__MIXIN_DEPENDS_LOCAL_OR_IMPORTED, message, new Object [] { this }));\n}\nreturn false;'"
	 * @generated
	 */
	boolean MixinDependsLocalOrImported(DiagnosticChain diagnostics, Map<Object, Object> context);

} // Extension
