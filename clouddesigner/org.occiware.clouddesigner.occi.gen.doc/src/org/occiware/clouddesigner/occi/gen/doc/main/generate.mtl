[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore','http://schemas.ogf.org/occi')]

[template public main(extension : Extension)]
[comment @main/]
[extension.generateExtension()/]
[extension.import.generateExtension()/]
[/template]

[template public generateExtension(extension : Extension)]
[file ('textile/'+extension.name+'.textile', false, 'UTF-8')]
Generated at [getNow()/] from [getFilePath(extension)/] by org.occiware.clouddesigner.occi.gen.doc

h1. OCCI Extension: [extension.name/]

| *Name* | [extension.name/] |
| *Scheme* | [extension.scheme/] |

h1. Imports

| *Name* | *Scheme* |
[for (imported : Extension | extension.import)]
| <a href="[imported.name/].textile">[imported.name/]</a> | [imported.scheme/] |
[/for]

h1. Kinds

[extension.kinds.generateKind()/]

h1. Mixins

[extension.mixins.generateMixin()/]

h1. Types

[extension.types.generateType()/]

[/file]
[/template]

[template public generateKind (kind : Kind) ]
h2. Kind [kind.term/]

| *Term* | [kind.term/] |
| *Scheme* | [kind.scheme/] |
| *Title* | [kind.title/] |
| *Parent* | [if kind.parent <> null][kind.parent.generateAnchor ('kind')/][/if] |

[kind.generateAttributes()/]
[generateActions(kind.actions)/]

[/template]

[template public generateMixin (mixin : Mixin) ]
h2. Mixin [mixin.term/]

| *Term* | [mixin.term/] |
| *Scheme* | [mixin.scheme/] |
| *Title* | [mixin.title/] |

h3. Depends

[for (md : Mixin | mixin.depends)]
* [md.generateAnchor ('mixin')/]
[/for]

h3. Applies

[for (ad : Kind | mixin.applies)]
* [ad.generateAnchor ('kind')/]
[/for]

[mixin.generateAttributes()/]
[generateActions(mixin.actions)/]

[/template]

[template public generateAttributes (category : Category) ]
h3. Attributes

[if category.attributes->size() <> 0]
| *Attribute* | *Type* | *Required* | *Mutable* | *Default* | *Description* |
[for (attribute : Attribute | category.attributes)]
[attribute.generateAttribute()/]
[/for]
[/if]
[/template]

[template public generateAttribute (attribute : Attribute) ]
| [attribute.name/] | [if attribute.type <> null][attribute.type.generateAnchor()/][/if] | [attribute.required/] | [attribute.mutable/] | [attribute.default/] | [attribute.description/] |
[/template]

[template public generateActions (actions : Set(Action)) ]
h3. Actions

[for (action : Action | actions)]
h4. Action [action.term/]

| *Term* | [action.term/] |
| *Scheme* | [action.scheme/] |
| *Title* | [action.title/] |

[if action.attributes->size() <> 0]
| *Attribute* | *Type* | *Required* | *Mutable* | *Default* | *Description* |
[for (attribute : Attribute | action.attributes)]
[attribute.generateAttribute()/]
[/for]
[/if]

[/for]

[/template]

[template public generateType (type : EDataType) ]
h2. Datatype [type.name/]

h3. Type [type.instanceClassName/]

h3. Annotations

[for (annotation : EAnnotation | type.eAnnotations)]
[for (detail : EStringToStringMapEntry | annotation.details)]
* [detail.key/] = [detail.value/]
[/for]
[/for]


[/template]

[template public generateType (type : EEnum) ]
h2. Enum [type.name/]

Literals:
[for (literal : EEnumLiteral | type.eLiterals)]
* [literal.name/]  
[/for]

[/template]

[template public generateAnchor (category : Category, prefix : String) post (trim())]
<a href="[category.eContainer().oclAsType(Extension).name/].textile#[prefix/]-[category.term/]">[category.scheme/][category.term/]</a>
[/template]

[template public generateAnchor (type : EDataType) post (trim())]
[let container : EObject = type.eContainer()]
[if container.oclIsKindOf(Extension)]
<a href="[container.oclAsType(Extension).name/].textile#[if type.oclIsTypeOf(EDataType)]datatype[/if][if type.oclIsTypeOf(EEnum)]enum[/if]-[type.name.toLowerCase()/]">[type.name/]</a>
[else]
[type.name/]
[/if]
[/let]
[/template]

[query public getNow() : String
	= invoke(
	'org.occiware.clouddesigner.occi.gen.doc.services.GenUtils', 
	'getNow()', 
	Sequence{})/]

[query public getFilePath(extension : Extension) : String
	= invoke(
	'org.occiware.clouddesigner.occi.gen.doc.services.GenUtils', 
	'getFilePath(org.occiware.clouddesigner.occi.Extension)', 
	Sequence{extension})/]

