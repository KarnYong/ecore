/**
 * Copyright (c) 2015-2016 Obeo, Inria
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 	
 * Contributors:
 * - William Piers <william.piers@obeo.fr>
 * - Philippe Merle <philippe.merle@inria.fr>
 */
package org.occiware.clouddesigner.occi.vmware.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.occiware.clouddesigner.occi.vmware.util.VmwareAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class VmwareItemProviderAdapterFactory extends VmwareAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public VmwareItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Datastore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatastoreItemProvider datastoreItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Datastore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatastoreAdapter() {
		if (datastoreItemProvider == null) {
			datastoreItemProvider = new DatastoreItemProvider(this);
		}

		return datastoreItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Cluster} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClusterItemProvider clusterItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Cluster}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClusterAdapter() {
		if (clusterItemProvider == null) {
			clusterItemProvider = new ClusterItemProvider(this);
		}

		return clusterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Datacenter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatacenterItemProvider datacenterItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Datacenter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatacenterAdapter() {
		if (datacenterItemProvider == null) {
			datacenterItemProvider = new DatacenterItemProvider(this);
		}

		return datacenterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hostsystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostsystemItemProvider hostsystemItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hostsystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostsystemAdapter() {
		if (hostsystemItemProvider == null) {
			hostsystemItemProvider = new HostsystemItemProvider(this);
		}

		return hostsystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Vm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VmItemProvider vmItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Vm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVmAdapter() {
		if (vmItemProvider == null) {
			vmItemProvider = new VmItemProvider(this);
		}

		return vmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Folderlink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FolderlinkItemProvider folderlinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Folderlink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFolderlinkAdapter() {
		if (folderlinkItemProvider == null) {
			folderlinkItemProvider = new FolderlinkItemProvider(this);
		}

		return folderlinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Resourcepoollink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourcepoollinkItemProvider resourcepoollinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Resourcepoollink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourcepoollinkAdapter() {
		if (resourcepoollinkItemProvider == null) {
			resourcepoollinkItemProvider = new ResourcepoollinkItemProvider(this);
		}

		return resourcepoollinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Clusterlink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClusterlinkItemProvider clusterlinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Clusterlink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClusterlinkAdapter() {
		if (clusterlinkItemProvider == null) {
			clusterlinkItemProvider = new ClusterlinkItemProvider(this);
		}

		return clusterlinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Resourcepool} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourcepoolItemProvider resourcepoolItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Resourcepool}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourcepoolAdapter() {
		if (resourcepoolItemProvider == null) {
			resourcepoolItemProvider = new ResourcepoolItemProvider(this);
		}

		return resourcepoolItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Datacenterlink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatacenterlinkItemProvider datacenterlinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Datacenterlink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatacenterlinkAdapter() {
		if (datacenterlinkItemProvider == null) {
			datacenterlinkItemProvider = new DatacenterlinkItemProvider(this);
		}

		return datacenterlinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hostsystemlink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostsystemlinkItemProvider hostsystemlinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hostsystemlink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostsystemlinkAdapter() {
		if (hostsystemlinkItemProvider == null) {
			hostsystemlinkItemProvider = new HostsystemlinkItemProvider(this);
		}

		return hostsystemlinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Datastorelink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatastorelinkItemProvider datastorelinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Datastorelink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatastorelinkAdapter() {
		if (datastorelinkItemProvider == null) {
			datastorelinkItemProvider = new DatastorelinkItemProvider(this);
		}

		return datastorelinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Virtualdisk} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualdiskItemProvider virtualdiskItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Virtualdisk}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualdiskAdapter() {
		if (virtualdiskItemProvider == null) {
			virtualdiskItemProvider = new VirtualdiskItemProvider(this);
		}

		return virtualdiskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Vswitch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VswitchItemProvider vswitchItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Vswitch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVswitchAdapter() {
		if (vswitchItemProvider == null) {
			vswitchItemProvider = new VswitchItemProvider(this);
		}

		return vswitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Portgroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortgroupItemProvider portgroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Portgroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortgroupAdapter() {
		if (portgroupItemProvider == null) {
			portgroupItemProvider = new PortgroupItemProvider(this);
		}

		return portgroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Virtualnetworkadapter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualnetworkadapterItemProvider virtualnetworkadapterItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Virtualnetworkadapter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualnetworkadapterAdapter() {
		if (virtualnetworkadapterItemProvider == null) {
			virtualnetworkadapterItemProvider = new VirtualnetworkadapterItemProvider(this);
		}

		return virtualnetworkadapterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Virtualdisknetwork} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualdisknetworkItemProvider virtualdisknetworkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Virtualdisknetwork}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualdisknetworkAdapter() {
		if (virtualdisknetworkItemProvider == null) {
			virtualdisknetworkItemProvider = new VirtualdisknetworkItemProvider(this);
		}

		return virtualdisknetworkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Virtualdisknetworklink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualdisknetworklinkItemProvider virtualdisknetworklinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Virtualdisknetworklink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualdisknetworklinkAdapter() {
		if (virtualdisknetworklinkItemProvider == null) {
			virtualdisknetworklinkItemProvider = new VirtualdisknetworklinkItemProvider(this);
		}

		return virtualdisknetworklinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hostnetworkadapter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostnetworkadapterItemProvider hostnetworkadapterItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hostnetworkadapter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostnetworkadapterAdapter() {
		if (hostnetworkadapterItemProvider == null) {
			hostnetworkadapterItemProvider = new HostnetworkadapterItemProvider(this);
		}

		return hostnetworkadapterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Dvswitch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DvswitchItemProvider dvswitchItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Dvswitch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDvswitchAdapter() {
		if (dvswitchItemProvider == null) {
			dvswitchItemProvider = new DvswitchItemProvider(this);
		}

		return dvswitchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Snapshot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SnapshotItemProvider snapshotItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Snapshot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSnapshotAdapter() {
		if (snapshotItemProvider == null) {
			snapshotItemProvider = new SnapshotItemProvider(this);
		}

		return snapshotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Snapshotlink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SnapshotlinkItemProvider snapshotlinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Snapshotlink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSnapshotlinkAdapter() {
		if (snapshotlinkItemProvider == null) {
			snapshotlinkItemProvider = new SnapshotlinkItemProvider(this);
		}

		return snapshotlinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Folder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FolderItemProvider folderItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Folder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFolderAdapter() {
		if (folderItemProvider == null) {
			folderItemProvider = new FolderItemProvider(this);
		}

		return folderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hostfolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostfolderItemProvider hostfolderItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hostfolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostfolderAdapter() {
		if (hostfolderItemProvider == null) {
			hostfolderItemProvider = new HostfolderItemProvider(this);
		}

		return hostfolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Vcentercapability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VcentercapabilityItemProvider vcentercapabilityItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Vcentercapability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVcentercapabilityAdapter() {
		if (vcentercapabilityItemProvider == null) {
			vcentercapabilityItemProvider = new VcentercapabilityItemProvider(this);
		}

		return vcentercapabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hostfirewallsystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostfirewallsystemItemProvider hostfirewallsystemItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hostfirewallsystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostfirewallsystemAdapter() {
		if (hostfirewallsystemItemProvider == null) {
			hostfirewallsystemItemProvider = new HostfirewallsystemItemProvider(this);
		}

		return hostfirewallsystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hostfirewallruleset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostfirewallrulesetItemProvider hostfirewallrulesetItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hostfirewallruleset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostfirewallrulesetAdapter() {
		if (hostfirewallrulesetItemProvider == null) {
			hostfirewallrulesetItemProvider = new HostfirewallrulesetItemProvider(this);
		}

		return hostfirewallrulesetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hostfirewallrule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostfirewallruleItemProvider hostfirewallruleItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hostfirewallrule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostfirewallruleAdapter() {
		if (hostfirewallruleItemProvider == null) {
			hostfirewallruleItemProvider = new HostfirewallruleItemProvider(this);
		}

		return hostfirewallruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hoststorage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HoststorageItemProvider hoststorageItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hoststorage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHoststorageAdapter() {
		if (hoststorageItemProvider == null) {
			hoststorageItemProvider = new HoststorageItemProvider(this);
		}

		return hoststorageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hoststoragelink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HoststoragelinkItemProvider hoststoragelinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hoststoragelink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHoststoragelinkAdapter() {
		if (hoststoragelinkItemProvider == null) {
			hoststoragelinkItemProvider = new HoststoragelinkItemProvider(this);
		}

		return hoststoragelinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Vmfolder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VmfolderItemProvider vmfolderItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Vmfolder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVmfolderAdapter() {
		if (vmfolderItemProvider == null) {
			vmfolderItemProvider = new VmfolderItemProvider(this);
		}

		return vmfolderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Serviceconsolenic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ServiceconsolenicItemProvider serviceconsolenicItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Serviceconsolenic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createServiceconsolenicAdapter() {
		if (serviceconsolenicItemProvider == null) {
			serviceconsolenicItemProvider = new ServiceconsolenicItemProvider(this);
		}

		return serviceconsolenicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Portgrouplink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PortgrouplinkItemProvider portgrouplinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Portgrouplink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPortgrouplinkAdapter() {
		if (portgrouplinkItemProvider == null) {
			portgrouplinkItemProvider = new PortgrouplinkItemProvider(this);
		}

		return portgrouplinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hostnatrule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostnatruleItemProvider hostnatruleItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hostnatrule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostnatruleAdapter() {
		if (hostnatruleItemProvider == null) {
			hostnatruleItemProvider = new HostnatruleItemProvider(this);
		}

		return hostnatruleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Hostnatportforwardlink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HostnatportforwardlinkItemProvider hostnatportforwardlinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Hostnatportforwardlink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHostnatportforwardlinkAdapter() {
		if (hostnatportforwardlinkItemProvider == null) {
			hostnatportforwardlinkItemProvider = new HostnatportforwardlinkItemProvider(this);
		}

		return hostnatportforwardlinkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Distributedportgroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DistributedportgroupItemProvider distributedportgroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Distributedportgroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistributedportgroupAdapter() {
		if (distributedportgroupItemProvider == null) {
			distributedportgroupItemProvider = new DistributedportgroupItemProvider(this);
		}

		return distributedportgroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Virtualcdrom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualcdromItemProvider virtualcdromItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Virtualcdrom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualcdromAdapter() {
		if (virtualcdromItemProvider == null) {
			virtualcdromItemProvider = new VirtualcdromItemProvider(this);
		}

		return virtualcdromItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Virtualfloppy} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualfloppyItemProvider virtualfloppyItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Virtualfloppy}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualfloppyAdapter() {
		if (virtualfloppyItemProvider == null) {
			virtualfloppyItemProvider = new VirtualfloppyItemProvider(this);
		}

		return virtualfloppyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.vmware.Virtualdisklink} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VirtualdisklinkItemProvider virtualdisklinkItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.vmware.Virtualdisklink}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVirtualdisklinkAdapter() {
		if (virtualdisklinkItemProvider == null) {
			virtualdisklinkItemProvider = new VirtualdisklinkItemProvider(this);
		}

		return virtualdisklinkItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (datastoreItemProvider != null) datastoreItemProvider.dispose();
		if (clusterItemProvider != null) clusterItemProvider.dispose();
		if (datacenterItemProvider != null) datacenterItemProvider.dispose();
		if (hostsystemItemProvider != null) hostsystemItemProvider.dispose();
		if (vmItemProvider != null) vmItemProvider.dispose();
		if (folderlinkItemProvider != null) folderlinkItemProvider.dispose();
		if (resourcepoollinkItemProvider != null) resourcepoollinkItemProvider.dispose();
		if (clusterlinkItemProvider != null) clusterlinkItemProvider.dispose();
		if (resourcepoolItemProvider != null) resourcepoolItemProvider.dispose();
		if (datacenterlinkItemProvider != null) datacenterlinkItemProvider.dispose();
		if (hostsystemlinkItemProvider != null) hostsystemlinkItemProvider.dispose();
		if (datastorelinkItemProvider != null) datastorelinkItemProvider.dispose();
		if (virtualdiskItemProvider != null) virtualdiskItemProvider.dispose();
		if (vswitchItemProvider != null) vswitchItemProvider.dispose();
		if (portgroupItemProvider != null) portgroupItemProvider.dispose();
		if (virtualnetworkadapterItemProvider != null) virtualnetworkadapterItemProvider.dispose();
		if (virtualdisknetworkItemProvider != null) virtualdisknetworkItemProvider.dispose();
		if (virtualdisknetworklinkItemProvider != null) virtualdisknetworklinkItemProvider.dispose();
		if (hostnetworkadapterItemProvider != null) hostnetworkadapterItemProvider.dispose();
		if (dvswitchItemProvider != null) dvswitchItemProvider.dispose();
		if (snapshotItemProvider != null) snapshotItemProvider.dispose();
		if (snapshotlinkItemProvider != null) snapshotlinkItemProvider.dispose();
		if (folderItemProvider != null) folderItemProvider.dispose();
		if (hostfolderItemProvider != null) hostfolderItemProvider.dispose();
		if (vcentercapabilityItemProvider != null) vcentercapabilityItemProvider.dispose();
		if (hostfirewallsystemItemProvider != null) hostfirewallsystemItemProvider.dispose();
		if (hostfirewallrulesetItemProvider != null) hostfirewallrulesetItemProvider.dispose();
		if (hostfirewallruleItemProvider != null) hostfirewallruleItemProvider.dispose();
		if (hoststorageItemProvider != null) hoststorageItemProvider.dispose();
		if (hoststoragelinkItemProvider != null) hoststoragelinkItemProvider.dispose();
		if (vmfolderItemProvider != null) vmfolderItemProvider.dispose();
		if (serviceconsolenicItemProvider != null) serviceconsolenicItemProvider.dispose();
		if (portgrouplinkItemProvider != null) portgrouplinkItemProvider.dispose();
		if (hostnatruleItemProvider != null) hostnatruleItemProvider.dispose();
		if (hostnatportforwardlinkItemProvider != null) hostnatportforwardlinkItemProvider.dispose();
		if (distributedportgroupItemProvider != null) distributedportgroupItemProvider.dispose();
		if (virtualcdromItemProvider != null) virtualcdromItemProvider.dispose();
		if (virtualfloppyItemProvider != null) virtualfloppyItemProvider.dispose();
		if (virtualdisklinkItemProvider != null) virtualdisklinkItemProvider.dispose();
	}

}
