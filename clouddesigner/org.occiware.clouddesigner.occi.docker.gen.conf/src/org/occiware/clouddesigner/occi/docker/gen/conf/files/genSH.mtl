[comment encoding = UTF-8 /]
[module genSH('http://schemas.ogf.org/occi/docker', 'http://schemas.ogf.org/occi/infrastructure', 'http://schemas.ogf.org/occi')]

[template public generateSH(configuration : Configuration)]
[file ('docker-conf.sh', false, 'UTF-8')]
#!/bin/sh

[for (machine : Machine | configuration.resources->select(oclIsKindOf(Machine)).oclAsType(Machine))]
[machine.genMachine()/]
[/for]
[/file]
[/template]

[template public genMachine (machine : Machine) ]
# Create the Docker [eClass().name/] named [name/]
docker-machine create [genDriverConfig()/] [name/]

[getOrderedContainers().genContainer(machine.name)/]
[/template]

[template public genDriverConfig (machine : Machine) post (trim())]
[/template]

[template public genDriverConfig (machine : Machine_VirtualBox) post (trim())]
 --driver=virtualbox[if memory <> null] --virtualbox-memory [memory.round()/][/if][if disk_size <> null] --virtualbox-disk-size [disk_size/][/if]
[/template]

[template public genContainer (container : Container, machineName : String) ]
# Create the Docker Container named [name/]
docker $(docker-machine config [machineName/]) create --name [name/][if publish_all] -P[/if] [genLinkConfig()/] [image.trim()/] [command.trim()/]

# Start the Docker Container named [name/]
docker $(docker-machine config [machineName/]) start [name/]


[/template]

[template public genLinkConfig (container : Container) post (trim())]
[for (link : DockerLink | links->filter(DockerLink))]
  --link [link.target.oclAsType(Container).name/][if link.alias <> null]:[link.alias/][/if]
[/for]
[/template]

[query public getOrderedContainers(machine : Machine) : Sequence(Container)
	= invoke(
	'org.occiware.clouddesigner.occi.docker.gen.conf.services.GenUtils', 
	'getOrderedContainers(org.occiware.clouddesigner.occi.docker.Machine)', 
	Sequence{machine})/]
