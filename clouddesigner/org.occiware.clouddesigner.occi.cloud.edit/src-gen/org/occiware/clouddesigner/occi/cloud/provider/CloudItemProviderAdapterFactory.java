/**
 * Copyright (c) 2015-2016 Inria
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 	
 * Contributors:
 * - Fawaz Paraiso <fawaz.paraiso@inria.fr>
 * - Philippe Merle <philippe.merle@inria.fr>
 */
package org.occiware.clouddesigner.occi.cloud.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.occiware.clouddesigner.occi.cloud.util.CloudAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CloudItemProviderAdapterFactory extends CloudAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CloudItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.cloud.Machine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MachineItemProvider machineItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.cloud.Machine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachineAdapter() {
		if (machineItemProvider == null) {
			machineItemProvider = new MachineItemProvider(this);
		}

		return machineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.cloud.Machine_CloudSigma} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Machine_CloudSigmaItemProvider machine_CloudSigmaItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.cloud.Machine_CloudSigma}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachine_CloudSigmaAdapter() {
		if (machine_CloudSigmaItemProvider == null) {
			machine_CloudSigmaItemProvider = new Machine_CloudSigmaItemProvider(this);
		}

		return machine_CloudSigmaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.cloud.Machine_Amazon_EC2} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Machine_Amazon_EC2ItemProvider machine_Amazon_EC2ItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.cloud.Machine_Amazon_EC2}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachine_Amazon_EC2Adapter() {
		if (machine_Amazon_EC2ItemProvider == null) {
			machine_Amazon_EC2ItemProvider = new Machine_Amazon_EC2ItemProvider(this);
		}

		return machine_Amazon_EC2ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.cloud.Machine_Gogrid} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Machine_GogridItemProvider machine_GogridItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.cloud.Machine_Gogrid}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachine_GogridAdapter() {
		if (machine_GogridItemProvider == null) {
			machine_GogridItemProvider = new Machine_GogridItemProvider(this);
		}

		return machine_GogridItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.cloud.Machine_Hp_Helion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Machine_Hp_HelionItemProvider machine_Hp_HelionItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.cloud.Machine_Hp_Helion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachine_Hp_HelionAdapter() {
		if (machine_Hp_HelionItemProvider == null) {
			machine_Hp_HelionItemProvider = new Machine_Hp_HelionItemProvider(this);
		}

		return machine_Hp_HelionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.cloud.Machine_GCE} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Machine_GCEItemProvider machine_GCEItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.cloud.Machine_GCE}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachine_GCEAdapter() {
		if (machine_GCEItemProvider == null) {
			machine_GCEItemProvider = new Machine_GCEItemProvider(this);
		}

		return machine_GCEItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.cloud.Machine_RackSpace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Machine_RackSpaceItemProvider machine_RackSpaceItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.cloud.Machine_RackSpace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachine_RackSpaceAdapter() {
		if (machine_RackSpaceItemProvider == null) {
			machine_RackSpaceItemProvider = new Machine_RackSpaceItemProvider(this);
		}

		return machine_RackSpaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.cloud.Machine_ProfitBricks} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Machine_ProfitBricksItemProvider machine_ProfitBricksItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.cloud.Machine_ProfitBricks}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachine_ProfitBricksAdapter() {
		if (machine_ProfitBricksItemProvider == null) {
			machine_ProfitBricksItemProvider = new Machine_ProfitBricksItemProvider(this);
		}

		return machine_ProfitBricksItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.cloud.Machine_OpenStack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Machine_OpenStackItemProvider machine_OpenStackItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.cloud.Machine_OpenStack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachine_OpenStackAdapter() {
		if (machine_OpenStackItemProvider == null) {
			machine_OpenStackItemProvider = new Machine_OpenStackItemProvider(this);
		}

		return machine_OpenStackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.occiware.clouddesigner.occi.cloud.Machine_SoftLayer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Machine_SoftLayerItemProvider machine_SoftLayerItemProvider;

	/**
	 * This creates an adapter for a {@link org.occiware.clouddesigner.occi.cloud.Machine_SoftLayer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachine_SoftLayerAdapter() {
		if (machine_SoftLayerItemProvider == null) {
			machine_SoftLayerItemProvider = new Machine_SoftLayerItemProvider(this);
		}

		return machine_SoftLayerItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (machineItemProvider != null) machineItemProvider.dispose();
		if (machine_CloudSigmaItemProvider != null) machine_CloudSigmaItemProvider.dispose();
		if (machine_Amazon_EC2ItemProvider != null) machine_Amazon_EC2ItemProvider.dispose();
		if (machine_GogridItemProvider != null) machine_GogridItemProvider.dispose();
		if (machine_Hp_HelionItemProvider != null) machine_Hp_HelionItemProvider.dispose();
		if (machine_GCEItemProvider != null) machine_GCEItemProvider.dispose();
		if (machine_RackSpaceItemProvider != null) machine_RackSpaceItemProvider.dispose();
		if (machine_ProfitBricksItemProvider != null) machine_ProfitBricksItemProvider.dispose();
		if (machine_OpenStackItemProvider != null) machine_OpenStackItemProvider.dispose();
		if (machine_SoftLayerItemProvider != null) machine_SoftLayerItemProvider.dispose();
	}

}
