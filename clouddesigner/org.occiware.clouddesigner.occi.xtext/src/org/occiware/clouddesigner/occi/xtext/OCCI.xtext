grammar org.occiware.clouddesigner.occi.xtext.OCCI with org.eclipse.xtext.xbase.Xbase

import "http://schemas.ogf.org/occi"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Extension returns Extension:
	'Extension'
	name=STRING
	'{'
	'scheme' scheme=STRING
	('import' '(' ^import+=[Extension|QualifiedName] ("," ^import+=[Extension|QualifiedName])* ')')?
	('kinds' '{' kinds+=Kind ("," kinds+=Kind)* '}')?
	('mixins' '{' mixins+=Mixin ("," mixins+=Mixin)* '}')?
	//	('types' '{' types+=EDataType ("," types+=EDataType)* '}')?
	'}';

Kind returns Kind:
	'Kind'
	term=ID
	'{'
	'scheme' scheme=STRING
	('title' title=STRING)?
	('parent' parent=[Kind|QualifiedName])?
	('attributes' '{' attributes+=Attribute ("," attributes+=Attribute)* '}')?
	('actions' '{' actions+=Action ("," actions+=Action)* '}')?
	'}';

Mixin returns Mixin:
	'Mixin'
	term=ID
	'{'
	'scheme' scheme=STRING
	('title' title=STRING)?
	('depends' '(' depends+=[Mixin|QualifiedName] ("," depends+=[Mixin|QualifiedName])* ')')?
	('applies' '(' applies+=[Kind|QualifiedName] ("," applies+=[Kind|QualifiedName])* ')')?
	('attributes' '{' attributes+=Attribute ("," attributes+=Attribute)* '}')?
	('actions' '{' actions+=Action ("," actions+=Action)* '}')?
	'}';

Attribute returns Attribute:
	'Attribute'
	name=STRING
	'{'
	('mutable' mutable=EBoolean)?
	('required' required=EBoolean)?
	('default' default=STRING)?
	('description' description=STRING)?
//	('type' type=[EDataType|QualifiedName])?
	'}';

Action returns Action:
	'Action'
	term=ID
	'{'
	'scheme' scheme=STRING
	('title' title=STRING)?
	('attributes' '{' attributes+=Attribute ("," attributes+=Attribute)* '}')?
	'}';

EDataType returns ecore::EDataType:
	EDataType_Impl | EEnum;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

EEnum returns ecore::EEnum:
	{ecore::EEnum}
	'EEnum'
	name=STRING
	'{'
	('instanceTypeName' instanceTypeName=STRING)?
	('eLiterals' '{' eLiterals+=EEnumLiteral ("," eLiterals+=EEnumLiteral)* '}')?
	'}';

EEnumLiteral returns ecore::EEnumLiteral:
	{ecore::EEnumLiteral}
	'EEnumLiteral'
	name=STRING
	'{'
	('value' value=EInt)?
	('literal' literal=STRING)?
	'}';

EDataType_Impl returns ecore::EDataType:
	{ecore::EDataType}
	'EDataType'
	name=STRING
	'{'
	('instanceTypeName' instanceTypeName=STRING)?
	'}';
	
