/**
 * This file contains the textual syntax of the OCCIware Description Language (OCCIwareDL).
 *
 * Copyright 2015 - Inria
 *
 * Contributors:
 * - Philippe Merle - Inria
 */

grammar org.occiware.clouddesigner.occi.xtext.OCCI with org.eclipse.xtext.common.Terminals

import "http://schemas.ogf.org/occi"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

// Let's note that for URI was replaced by STRING in the following XText rules.

// BNF
// <Grammar> ::= <ExtensionDecl> | <ConfigurationDecl>
//

Grammar returns ecore::EObject:
	ExtensionDecl | ConfigurationDecl
	;

// BNF
// <ExtensionDecl> ::= `extension' <ID> `:' <URI> <ImportDecl>* ( <KindDecl> | <MixinDecl> | <DataTypeDecl> | <EnumTypeDecl> )*
//
// <ImportDecl> ::= `import' <URI> ( `as' <ID> )?
//

ExtensionDecl returns Extension:
	'extension'
	name=ID ':' scheme=STRING /* URI */
	( 'import' ^import+=[Extension|STRING /* URI */] ( 'as' ID )? )* // TODO where storing the ID?
	( kinds+=KindDecl
	| mixins+=MixinDecl
	| types+=DataTypeDecl
    | types+=EnumTypeDecl
	)*
	;

// BNF
// <KindDecl> ::= `kind' <ID> ( `extends' <KindRef> )? `{' ( `title' <STRING> )? ( <AttributeDecl> | <ActionDecl> )* `}' 
//
// <KindRef> ::= <ID> ( `.' <ID> )?
//

KindDecl returns Kind:
	'kind'
	term=ID
	( 'extends' parent=[Kind|QualifiedID] )?
	'{'
    ( 'title' title=STRING )?
    (
      attributes+=AttributeDecl
    | actions+=ActionDecl
    )*
    '}'
	;

// BNF
// <MixinDecl> ::= `mixin' <ID> ( `depends' <MixinRef> ( `,' <MixinRef> )* )? ( `applies' <KindRef> ( `,' <KindRef> )* )? `{' ( `scheme' <URI> )? ( `title' <STRING> )? ( <AttributeDecl> | <ActionDecl> )* `}' 
//
// <MixinRef> ::= <ID> ( `.' <ID> )?
//

MixinDecl returns Mixin:
	'mixin'
	term=ID
	( 'depends' depends+=[Mixin|QualifiedID] ( ',' depends+=[Mixin|QualifiedID] )* )?
	( 'applies' applies+=[Kind|QualifiedID] ( ',' applies+=[Kind|QualifiedID] )* )?
	'{'
    ( 'scheme' scheme=STRING /* URI */ )?
    ( 'title' title=STRING )?
    (
      attributes+=AttributeDecl
    | actions+=ActionDecl
    )*
    '}'
    ;

// BNF
// <AttributeDecl> ::= `attribute' `mutable'? `required'? <ID> `:' <DataTypeRef> ( `*' )? ( `=' <STRING> )? ( `{' ( `description' <STRING> )? `}' )?
//
// <DataTypeRef> ::= <ID> ( `.' <ID> )?
//

AttributeDecl returns Attribute:
	'attribute'
	( mutable?='mutable' )?
	( required?='required' )?
	name=ID
	':'
	type=[ecore::EDataType|QualifiedID]
	( '*' )?
	( '=' default=STRING )?
	(
	'{' ('description' description=STRING )? '}' )?
	;

// BNF
// <ActionDecl> ::= `action' <ID> `(' ( <ID> `:' <DataTypeRef> `*'? ( `,' <ID> `:' <DataTypeRef> `*'? )* )? `)' ( `{' `title' <STRING> `}' )?
//

ActionDecl returns Action:
	'action'
	term=ID
	'('
	( attributes+=ParameterDecl ( ',' attributes+=ParameterDecl )* )?
	')'
	( '{' 'title' title=STRING '}' )?
	;

ParameterDecl returns Attribute:
    name=ID 
    ':'
    type=[ecore::EDataType|QualifiedID]
    ( multiple_values?='*' )?
    ;

// BNF  
// <DataTypeDecl> ::= `datatype' ( `serializable' )? <ID> `:' <STRING> ( `{' <DataTypeAnnotation>+ `}' )?
//
// <DataTypeAnnotation> ::=
//   `minExclusive' `=' <Integer>
// | `minInclusive' `=' <Integer>
// | `maxExclusive' `=' <Integer>
// | `maxInclusive' `=' <Integer>
// | `totalDigits' `=' <PositiveInteger>
// | `fractionDigits' `=' <PositiveInteger>
// | `length' `=' <PositiveInteger>
// | `minLength' `=' <PositiveInteger>
// | `maxLength' `=' <PositiveInteger>
// | `whiteSpace' `=' <PositiveInteger>
// | `pattern' `=' <STRING>

DataTypeDecl returns ecore::EDataType:
	{ecore::EDataType}
	'datatype'
	( serializable?='serializable' )?
	name=ID ':' instanceTypeName=STRING
	( '{' eAnnotations+=DataTypeAnnotations '}' )?
	;

DataTypeAnnotations returns ecore::EAnnotation:
	details+=DataTypeAnnotation+
	;

DataTypeAnnotation returns ecore::EStringToStringMapEntry:
	  key='minExclusive' '=' value=Integer
	| key='minInclusive' "minInclusive" '=' value=Integer
	| key='maxExclusive' '=' value=Integer
	| key='maxInclusive' '=' value=Integer
	| key='totalDigits' '=' value=PositiveInteger
	| key='fractionDigits' '=' value=PositiveInteger
	| key='length' '=' value=PositiveInteger
	| key='minLength' '=' value=PositiveInteger
	| key='maxLength' '=' value=PositiveInteger
	| key='whiteSpace' '=' value=PositiveInteger
	| key='pattern' '=' value=STRING
	;
    
// BNF
// <EnumTypeDecl> ::= `enum' <ID> `{' <ID> ( `,' <ID> )* `}'
//

EnumTypeDecl returns ecore::EEnum:
	{ecore::EEnum}
	'enum'
	name=ID
	'{' eLiterals+=EnumLiteralDecl ( ',' eLiterals+=EnumLiteralDecl )* '}'
	;

EnumLiteralDecl returns ecore::EEnumLiteral:
	{ecore::EEnumLiteral}
	name=ID
	;

// BNF
// <ConfigurationDecl> ::= `configuration' <UseDecl>* <ResourceDecl>*
//
ConfigurationDecl returns Configuration:
	{Configuration}
	'configuration'
	( 'use' use+=[Extension|STRING] ( 'as' ID )? )* // TODO where storing the ID?
	resources+=ResourceDecl*
	;

// BNF
// <UseDecl> ::= `use' <URI> ( `as' <ID> )?
//

// BNF
// <ResourceDecl> ::= `resource' <URI> `:' <KindRef> ( `mixins' <MixinRef> ( `,' <MixinRef> )* )? `{' <StateDecl>* <LinkDecl>* `}'
//
ResourceDecl returns Resource:
	'resource'
	id=STRING /* URI */
	':'
	kind=[Kind|QualifiedID]
	( 'mixins' mixins+=[Mixin|QualifiedID] ( ',' mixins+=[Mixin|QualifiedID] )* )?
	'{'
	attributes+=StateDecl*
	links+=LinkDecl*
	'}';

// BNF
// <StateDecl> ::= `state' <ID> `=' <STRING>
//
StateDecl returns AttributeState:
	'state' name=ID '=' value=STRING
	;

// BNF
// <LinkDecl> ::= `link' <URI> `:' <KindRef> ( `mixins' <MixinRef> ( `,' <MixinRef> )* )? `target' <URI> `{' <StateDecl>* `}'
//
LinkDecl returns Link:
	'link'
	id=STRING /* URI */
	':'
	kind=[Kind|QualifiedID]
	( 'mixins' mixins+=[Mixin|QualifiedID] ( ',' mixins+=[Mixin|QualifiedID] )* )?
	'target' target=[Resource|STRING /* URI */]
	'{'
	attributes+=StateDecl*
	'}'
	;

// URI: STRING;

QualifiedID: ID ( '.' ID )? ;

Integer returns String: '-'? INT ;

PositiveInteger returns String: INT ;
