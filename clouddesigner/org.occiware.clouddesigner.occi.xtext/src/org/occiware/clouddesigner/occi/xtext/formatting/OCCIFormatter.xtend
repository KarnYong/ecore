/*
 * generated by Xtext
 */
package org.occiware.clouddesigner.occi.xtext.formatting

import com.google.inject.Inject
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import org.occiware.clouddesigner.occi.xtext.services.OCCIGrammarAccess

/**
 * This class contains custom formatting declarations.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#formatting
 * on how and when to use it.
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
public class OCCIFormatter extends AbstractDeclarativeFormatter {
	
	@Inject extension OCCIGrammarAccess
	
	override protected configureFormatting(FormattingConfig c)
	{
		c.setLinewrap(1).before(getKindDeclRule)

		for(import: findKeywords('import')) {
			c.setNoLinewrap().after(import)
			c.setLinewrap().before(import)
        }

		for(use: findKeywords('use')) {
			c.setNoLinewrap().after(use)
			c.setLinewrap().before(use)
        }

		c.setLinewrap(1).before(getAttributeDeclRule)
		c.setLinewrap(1).before(getActionDeclRule)

		c.setLinewrap(1).before(getDataTypeDeclRule)
		c.setLinewrap(1).before(getEnumTypeDeclRule)

		c.setLinewrap(1).before(getDataTypeAnnotationRule)

		c.setLinewrap(1).before(getResourceDeclRule)
		c.setLinewrap(1).before(getLinkDeclRule)
		c.setLinewrap(1).before(getStateDeclRule)

//		for(extendsKeyword: findKeywords('extends')) {
//          c.setNoLinewrap().after(extendsKeyword)
//        }

		for(pair: findKeywordPairs('(', ')')) {
			c.setNoLinewrap().before(pair.first)
			c.setNoSpace().after(pair.first)
			c.setNoLinewrap().before(pair.second)
			c.setNoSpace().before(pair.second)
		}

		for(pair: findKeywordPairs('{', '}')) {
			c.setIndentation(pair.first, pair.second)
			c.setLinewrap(1).after(pair.first)
			c.setLinewrap(1).before(pair.second)
			c.setLinewrap(1).after(pair.second)
		}
		for(comma: findKeywords(',')) {
			c.setNoLinewrap().before(comma)
			c.setNoSpace().before(comma)
			c.setLinewrap().after(comma)
		}
		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)
	}
}
